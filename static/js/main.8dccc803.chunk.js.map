{"version":3,"sources":["components/PokemonSearch.js","components/PokemonCard.js","App.js","serviceWorker.js","index.js"],"names":["PokemonSearch","props","react_default","a","createElement","Form","className","onSubmit","handleSubmit","Field","Header","as","type","onChange","handleChange","PokemonCard","state","visible","color","_this","types","flipCard","setState","this","Transition","animation","duration","Card","onClick","Image","src","image","Label","name","hp","map","x","rarity","attacks","text","damage","convertedEnergyCost","weaknesses","value","Component","App","pokemon","data","handleChangePokemon","e","target","preventDefault","fetch","concat","then","res","json","cards","_this2","Container","fluid","src_components_PokemonSearch","Group","itemsPerRow","key","id","src_components_PokemonCard","imageUrlHiRes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8dccc803.chunk.js","sourcesContent":["import React from 'react'\nimport { Form, Header } from 'semantic-ui-react'\n\nimport './PokemonSearch.css'\n\nconst PokemonSearch = (props) => {\n  return (\n    <Form className=\"search-bar\" onSubmit={props.handleSubmit}>\n      <Form.Field>\n        <label><Header as=\"h1\" className=\"title\">Pokemon Search</Header></label>\n        <input type=\"text\" onChange={props.handleChange}/>\n      </Form.Field>\n    </Form>\n  )\n}\n\nexport default PokemonSearch\n","import React, { Component } from 'react'\nimport { Label, Card, Image, Header, Transition } from 'semantic-ui-react'\n\nimport \"./PokemonCard.css\"\n\nclass PokemonCard extends Component {\n  state = {\n    visible: true,\n    color: (this.props.types === \"Grass\") ? \"green\" : \"grey\"\n  }\n  flipCard = () => this.setState({visible: !this.state.visible})\n  render() {\n    const { visible } = this.state\n    return (\n      <Transition visible={visible} animation=\"jiggle\" duration={700}>\n        <Card className=\"pokemon-card\" onClick={this.flipCard}>\n          {\n            (visible === true) ?\n            <Image src={this.props.image} className=\"pokemon-image\"/> :\n              <Label className=\"pokemon-label\" color={this.state.color}>\n              <Header>{this.props.name}</Header>\n\n              HP: {(this.props.hp) ? this.props.hp : 'NA'} <br/>\n              Type(s): {(this.props.types) ? this.props.types.map(x => (x)) : 'NA'}<br/>\n              Rarity: {(this.props.rarity) ? this.props.rarity : 'NA'} <br/>\n              <br/>\n              Attacks: {(this.props.attacks) ? this.props.attacks.map(x => <li> {x.name}<ul>\n                <li>{(x.text) ? x.text : 'Description not available.'}</li>\n                <li>Damage: {(x.damage) ? x.damage : 'NA'}</li>\n                <li>Converted Energy Cost:  {x.convertedEnergyCost}</li>\n                </ul></li>) : \"none\"} <br/>\n              Weaknesses: {(this.props.weaknesses) ? this.props.weaknesses.map(x => <li>{x.type}{x.value}</li>) : 'NA'}\n              </Label>\n          }\n        </Card>\n      </Transition>\n    )\n  }\n}\n\nexport default PokemonCard\n","import React, { Component } from 'react'\nimport { Container, Card } from 'semantic-ui-react'\nimport './App.css';\n\nimport PokemonSearch from './components/PokemonSearch'\nimport PokemonCard from './components/PokemonCard'\n\nconst API = 'https://api.pokemontcg.io/v1/cards'\n\nclass App extends Component {\n  state = {\n    pokemon: '',\n    data: ''\n  }\n  componentDidMount() {\n    fetch(API)\n      .then(res => res.json())\n      .then(data => this.setState({\n        data: data.cards\n      }))\n  }\n  handleChangePokemon = (e) => {\n    this.setState({\n      pokemon: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault()\n    fetch(`https://api.pokemontcg.io/v1/cards?name=${this.state.pokemon}`)\n      .then(res => res.json())\n      .then(data => this.setState({\n        data: data.cards\n      }))\n  }\n  render() {\n    return (\n      <Container className=\"container\" fluid>\n          <PokemonSearch handleChange={this.handleChangePokemon} handleSubmit={this.handleSubmit}/>\n\n      <Card.Group itemsPerRow={4}>\n        {this.state.data && this.state.data.map(x =>\n          <li key={x.id}>\n            <PokemonCard\n              name={x.name}\n              types={x.types}\n              image={x.imageUrlHiRes}\n              hp={x.hp}\n              rarity={x.rarity}\n              attacks={x.attacks}\n              weaknesses={x.weaknesses}\n              />\n          </li>)}\n        </Card.Group>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}